generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String   @id @default(uuid())
    name           String?  @db.VarChar(50)
    description    String?  @db.VarChar(160)
    location       String?  @db.VarChar(30)
    photoUrl       String?
    headerUrl      String?
    username       String   @unique @db.VarChar(20)
    password       String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt
    createdTweets  Tweet[]  @relation("userTweets")
    createdReplies Reply[]  @relation("userReplies")
    retweets       Tweet[]  @relation("userRetweets")
    likedTweets    Tweet[]  @relation("userLikes")
    likedReplies   Reply[]  @relation("userReplyLikes")
    following      User[]   @relation("userFollows")
    followers      User[]   @relation("userFollows")
}

model Tweet {
    id          String   @id @default(uuid())
    text        String   @db.VarChar(280)
    createdAt   DateTime @default(now())
    author      User     @relation("userTweets", fields: [authorId], references: [id])
    authorId    String
    photoUrl    String?
    likedBy     User[]   @relation("userLikes")
    retweetedBy User[]   @relation("userRetweets")
    replies     Reply[]  @relation("tweetReplies")
    retweets    Tweet[]  @relation("retweetOf")
    isRetweet   Boolean  @default(false)
    retweetOf   Tweet?   @relation("retweetOf", fields: [retweetOfId], references: [id])
    retweetOfId String?
}

model Reply {
    id        String   @id @default(uuid())
    text      String   @db.VarChar(280)
    createdAt DateTime @default(now())
    author    User     @relation("userReplies", fields: [authorId], references: [id])
    authorId  String
    photoUrl  String?
    likedBy   User[]   @relation("userReplyLikes")
    parent    Tweet    @relation("tweetReplies", fields: [parentId], references: [id])
    parentId  String
}
